{"version":3,"sources":["extractUrls.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;kBASe,UAAC,KAAD,EAAQ,UAAR,EAAuB;AAClC,QAAI,aAAJ,CADkC;;AAGlC,QAAI,CAAC,UAAD,EAAa;AACb,cAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN,CADa;KAAjB,MAEO,IAAI,8CAAJ,EAAyC;AAC5C,eAAO,uCAAwB,KAAxB,CAAP,CAD4C;KAAzC,MAEA;AACH,cAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN,CADG;KAFA;;AAMP,WAAO,KAAK,MAAL,CAAY,UAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAwB;AACvC,eAAO,KAAK,OAAL,CAAa,KAAb,MAAwB,KAAxB,CADgC;KAAxB,CAAnB,CAXkC;CAAvB","file":"extractUrls.js","sourcesContent":["import extractUrlsFromMarkdown from './extractUrlsFromMarkdown';\nimport {\n    SOURCE_TYPE_MARKDOWN\n} from './constants';\n\n/**\n * @param {string} input\n * @param {SOURCE_TYPE_*} sourceType\n */\nexport default (input, sourceType) => {\n    let urls;\n\n    if (!sourceType) {\n        throw new Error('Must set source type.');\n    } else if (sourceType === SOURCE_TYPE_MARKDOWN) {\n        urls = extractUrlsFromMarkdown(input);\n    } else {\n        throw new Error('Unknown source type.');\n    }\n\n    return urls.filter((value, index, self) => {\n        return self.indexOf(value) === index;\n    });\n};\n"],"sourceRoot":"/source/"}